install.packages(c("acepack", "ada", "AppliedPredictiveModeling", "assertthat", "base64enc", "BH", "bit", "bitops", "BradleyTerry2", "brew", "brglm", "car", "caret", "caTools", "chron", "colorspace", "CORElearn", "curl", "data.table", "DBI", "devtools", "dichromat", "digest", "dplyr", "e1071", "elasticnet", "ElemStatLearn", "evaluate", "evd", "fastmatch", "ff", "ffbase", "foreach", "forecast", "formatR", "Formula", "fracdiff", "gbm", "GGally", "ggdendro", "ggplot2", "git2r", "gsubfn", "gtable", "gtools", "highr", "HistData", "Hmisc", "htmltools", "httpuv", "httr", "ipred", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "lars", "latticeExtra", "lava", "lazyeval", "lme4", "lubridate", "magrittr", "manipulate", "markdown", "memoise", "mime", "minqa", "munsell", "nloptr", "numDeriv", "packrat", "pbkrtest", "pgmm", "PKI", "plyr", "prodlim", "profileModel", "proto", "quadprog", "quantmod", "quantreg", "R6", "randomForest", "rattle", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RecordLinkage", "reshape", "reshape2", "RGtk2", "rJava", "RJSONIO", "rmarkdown", "RMySQL", "roxygen2", "rpart", "rpart.plot", "RSQLite", "rstudio", "rstudioapi", "rversions", "scales", "shiny", "shinyapps", "SparseM", "sqldf", "stringi", "stringr", "swirl", "testthat", "timeDate", "tseries", "TTR", "UsingR", "whisker", "xlsx", "xlsxjars", "XML", "xml2", "xtable", "xts", "yaml", "zoo"))
library(caret)
getwd()
dir()
setwd("../datascience")
getwd()
ls
dir()
getwd("shinydatascience")
setwd("shinydatascience")
dir()
shiny::runApp()
?actionButton
?isolate
shiny::runApp()
shiny::runApp()
?actionButton
?geom_text
shiny::runApp()
lmfit <- lm(mpg ~ am, data=mtcars)
plot(lmfit)
plot(predict(lmfit))
plot(mtcars$am, predict(lmfit))
shiny::runApp()
?geom_smooth
shiny::runApp()
shiny::runApp()
shiny::runApp()
test <- data.frame("one", c(1,2,3))
test
test <- data.frame(name="one", c(1,2,3))
test
test <- data.frame(name="one", value=c(1,2,3))
test
test <- data.frame(value=c(1,2,3))
test$numvey <- c(5,6,7)
test
lmfit$coefficients
lmfit$coefficients["Intercept"]
lmfit$coefficients["(Intercept)"]
?rmse
?rms
??rms
shiny::runApp()
?renderTable
shiny::runApp()
shiny::runApp()
example(renderTable)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dataTableOutput
?renderDataTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
test
test$numvey <- test$numvey/3
test
round(test,3)
round(test,1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(lmfit)
lmfit$xlevels
?lm
summary(lmfit)
summary(lmfit)$coefficients
sumCoef <- summary(lmfit)$coefficients
sumCoef[1,"Estimate"]
sumCoef[1,"Std. Error"]
sumCoef[1,"Estimate"] + c(-1,1) * qt(.95, df = myfit$df) * sumCoef[1,"Std. Error"]
myfit <- lmfit
sumCoef[1,"Estimate"] + c(-1,1) * qt(.95, df = myfit$df) * sumCoef[1,"Std. Error"]
sumCoef
sumCoef[1,"Estimate"] + c(-1,1) * qt(.95, df = myfit$df) * sumCoef[1,"Std. Error"]
qt(.95, df = myfit$df) * sumCoef[1,"Std. Error"]
1.91/1.12
myfti$df
myfit$df
qt(.95, df = myfit$df)
qnorm(.95, df = myfit$df)
qnorm(.95)
qnorm(.9)
qnorm(.975)
shiny::runApp()
shiny::runApp()
shiny::runApp()
conflvl <- .9
.5+conflvl/2
conflvl <- .9
sumCoef <- summary(myfit)$coefficients
confInterval <- sumCoef[,"Estimate"] +
c(-1,1) * qt(.5+conflvl/2, df = myfit$df) * sumCoef[,"Std. Error"]
confInterval
conflvl <- .9
sumCoef <- summary(myfit)$coefficients
confInterval <- sumCoef[,"Estimate"] +
c(-1,1) * qt(.5+conflvl/2, df = myfit$df) * sumCoef[,"Std. Error"]
sumCoef[,"Estimate"]
t(sumCoef[,"Estimate"])
sumCoef[1,"Estimate"]
getConfInterval <- function(xi) {}
getConfInterval <- function(fit, xi, level) {
sumCoef <- summary(fit)$coefficients
confInterval <- sumCoef[xi,"Estimate"] + c(-1,1) * qt(.5+level/2, df = myfit$df) * sumCoef[xi,"Std. Error"]
}
getConfInterval(myfit, 1, .9)
getConfInterval <- function(fit, xi, level) {
sumCoef <- summary(fit)$coefficients
sumCoef[xi,"Estimate"] + c(-1,1) * qt(.5+level/2, df = myfit$df) * sumCoef[xi,"Std. Error"]
}
getConfInterval(myfit, 1, .9)
getConfInterval(myfit, c(1,2), .9)
getConfInterval(myfit, 2, .9)
conflvl <- .9
confInterval <- cbind(getConfInterval(myfit, 1, conflvl),
getConfInterval(myfit, 2, conflvl))
confInterval
getConfInterval <- function(fit, xi, level) {
sumCoef <- summary(fit)$coefficients
sumCoef[xi,"Estimate"] + c(-1,0,1) * qt(.5+level/2, df = myfit$df) * sumCoef[xi,"Std. Error"]
}
cbind(getConfInterval(myfit, 1, conflvl),
getConfInterval(myfit, 2, conflvl))
sumCoef[xi,"Estimate"] + c(-1,0,1) * qt(.5+level/2, df = myfit$df) * sumCoef[xi,"Std. Error"]
sumCoef[xi,"Estimate"] + c(-1,0,1) * qt(.5+level/2, df = myfit$df) * sumCoef[xi,"Std. Error"]
sumCoef[1,"Estimate"] + c(-1,0,1) * qt(.5+.9/2, df = myfit$df) * sumCoef[1,"Std. Error"]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
confInterval
shiny::runApp()
confInterval <- rbind(getConfInterval(myfit, 1, conflvl),
getConfInterval(myfit, 2, conflvl))
confInterval
getConfInterval <- function(fit, xi, level) {
sumCoef <- summary(fit)$coefficients
sumCoef[xi,"Estimate"] + c(-1,1) * qt(.5+level/2, df = fit$df) * sumCoef[xi,"Std. Error"]
}
myfit <- lm(mpg ~ am, data=mtcars)
conflvl <- .9
confInterval <- rbind(getConfInterval(myfit, 1, conflvl),
getConfInterval(myfit, 2, conflvl))
confInterval
shiny::runApp()
confInterval[,1]
T && F
T && F
T && T
T & T
confInterval[1,2]
confInterval[2,2]
confInterval[2,1]
confInterval[1,2]
confInterval[1,1]
shiny::runApp()
rbind(confInterval[,1],NA),3
rbind(confInterval[,1],NA)
confInterval[,1]
cbind(confInterval[,1], NA)
c(confInterval[,1], NA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='mattdsquared', token='5F7F8A69E5951FDA40A8E3361B86BCF8', secret='p5SmdpL7RLxoMiOkEeAD2cYIKi3L9/0hKHQuAumJ')
intall.packages("shinyapps")
??rtools
install.packages("RTools")
devtools::install_git("shinyapps")
devtools::install_github('rstudio/rsconnect')
shinyapps::setAccountInfo(name='mattdsquared', token='5F7F8A69E5951FDA40A8E3361B86BCF8', secret='p5SmdpL7RLxoMiOkEeAD2cYIKi3L9/0hKHQuAumJ')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mattdsquared', token='5F7F8A69E5951FDA40A8E3361B86BCF8', secret='p5SmdpL7RLxoMiOkEeAD2cYIKi3L9/0hKHQuAumJ')
library(shiny)
getwd()
shinyapps::deployApp()
rm(list=ls())
shiny::runApp()
runApp(display.mode = 'showcase')
shiny::runApp()
runApp(display.mode = 'showcase')
shiny::runApp()
shiny::runApp()
runApp(display.mode = 'showcase')
shiny::runApp()
shinyapps::deployApp()
rm(list=ls())
setwd("~")
getwd()
setwd("C:/users/Matt")
dir()
setwd("C:/users/Matt/datascience")
dir()
setwd("CheckMyFit")
ls
dir()
shinyapps::deployApp()
?mtcars
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shiny::runApp('C:/Users/Matt/datascience/CheckMyFit')
shinyapps::deployApp('C:/Users/Matt/datascience/CheckMyFit')
rm(list=ls())
devtools::install_github("ramnathv/slidify")
dir()
library(slidify)
author("CheckMyFit")
dir()
author("CheckMyFit_Pitch")
